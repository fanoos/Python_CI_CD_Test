image: python:3.7
# These paths will be cached in between test runs. Very useful for reducing the build time.
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well   .
#ok nook
cache:
 paths:
  - ~/.cache/pip/
  - venv/
 
# Register any environment variables you need here.
variables:
  MyDocker_Container: "mycontainer"
  TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  #DOCKER_DRIVER: overlay2


.only-default: &only-default
  only:
    - master
    - merge_requests
    - tags
    - developer
    - feature_one
    
.before_script:
 - python -V
 - apt-get update -q -y
 - pip list
 

stages:
#- ver
 - install_dependencies
 - unit_tests
 - build_docker
 - run_docker
 - release

.Job_ver:
   stage: ver
   script:
     - python -V

Job_install_dependencies:  
    <<: *only-default
    stage: install_dependencies
     # This runs before the unit_tests task and should do any miscellaneous setup that's needed.
    before_script:
     - echo "install dependencies Stage"
    
    script:
     - pip list
     - pip install -U virtualenv
     - virtualenv venv
     - source venv/bin/activate
     #- pip install -r requirements.txt
     - rm -rf dist
     - rm -rf build
     - python setup.py bdist_wheel sdist
     - pip install .
        
    artifacts:
    #FIRST I HAVE TO SETTING TEST TO STORE RESULT TO SUCH .XML FILE AFTER THAT KEEP IN IT IN ARTIFACT
    # reports:
    #  junit: rspec.xml // for unit test
    #  codequality: some.txt //for code review
     paths:
      - venv/
      - venv/bin/
      - dist/
      - build/
     expire_in: 60 minutes
    except:
        - tags
    
    # The main task to run your tests.
    # This imports the Docker image for Python. Useful so you don't have to do any Python setup manually.
Job_unit_tests:  
    <<: *only-default  
    stage: unit_tests
    script:
     - echo "Running unit testsâ€¦"
     - . venv/bin/activate
     #- flake8 --ignore W292,W391 --exclude=venv* --statistics
     #- pytest -v --cov=calculator
     - pip install tox
     - pip list
     - tox
    except:
        - tags

build_docker_feature:
   # Official docker image.
  #image: docker:git #docker:latestmycontainer
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 
   script:
    #- docker build --pull -t "$CI_REGISTRY_IMAGE" .
    #- docker push "$CI_REGISTRY_IMAGE"
    #- docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    #- docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    #- docker build --pull -t $CI_REGISTRY_IMAGE:"OKOK" .
    #- docker push $CI_REGISTRY_IMAGE:"OKOK"
    #- docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    #- docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker build --pull -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
   only:
    refs:
     - merge_requests
     - developer
    #variables:
     #- $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "feature/*"
     #- $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "developer"
 
run_docker_feature:
  #image: docker:git
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
 
   script:
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE myimage
    - docker run --name 'mycontainer' myimage
    - docker stop 'mycontainer'
   after_script:
    
    - docker info
   #- docker rm -f $CI_REGISTRY_IMAGE:"OKOK" myimage || true
   #- docker rmi -f myrepo:myimage image
   only:
    refs:
     - merge_requests
     - developer
     
build_docker_production:
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 
   script:
    - docker build --pull -t $RELEASE_IMAGE .
    - docker push $RELEASE_IMAGE
   only:
    refs:
     - merge_requests
     - master
   
 
run_docker_production:
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
 
   script:
    - docker pull $RELEASE_IMAGE
    - docker tag $RELEASE_IMAGE myimage
    - docker run --name 'mycontainer' myimage
    - docker stop 'mycontainer'
   after_script:
    - docker info
  
   only:
    refs:
     - merge_requests
     - master
   
pypi:
  stage: release
  variables:
    TWINE_USERNAME: $PYPI_USER
    TWINE_PASSWORD: $PYPI_PASSWORDD
  before_script:
   # - BRANCH=$(git branch --contains ${CI_COMMIT_REF_NAME})
    #- if [ "${BRANCH}" != "master" ]; then exit 0; fi
    - echo ${CI_COMMIT_REF_NAME}
  script:
      - pip install -U twine wheel setuptools
      - rm -rf dist
      - rm -rf build
      - python setup.py check sdist bdist  # This will fail if your creds are bad.
      - python setup.py sdist bdist_wheel
      - twine check dist/*
      - echo $PYPI_USER
      - twine upload --repository-url https://upload.pypi.org/legacy/ --username $PYPI_USER --password $PYPI_PASSWORDD dist/*
      #- twine upload dist/*.tar.gz
      #twine upload --repository-url https://test.pypi.org/legacy/ dist/*
 
  only:
     - tags
     #- master
     #- tags && master
  except:
     - developer
     - dev*
     - feature/*
     - feature*
  
build_docker_tag:
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 
   script:
    - docker build --pull -t $VERSION_IMAGE .
    - docker push $VERSION_IMAGE
   only:
    refs:
     - tags
   
   
 
run_docker_tag:
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
 
   script:
    - docker pull $VERSION_IMAGE
    - docker tag $VERSION_IMAGE myimage
    - docker run --name $MyDocker_Container myimage
    - docker stop $MyDocker_Container
   after_script:
    - docker info
  
   only:
    refs:
     - tags
     
     
  

 

   


  
