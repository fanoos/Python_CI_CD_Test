image: python:3.7
# These paths will be cached in between test runs. Very useful for reducing the build time.
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
 paths:
  - ~/.cache/pip/
  - venv/
 
# Register any environment variables you need here.
variables:
 MyDocker_Container: "mycontainer"
  #DOCKER_DRIVER: overlay2


.only-default: &only-default
  only:
    - master
    - merge_requests
    - tags
    - developer
    
.before_script:
 - python -V
 - apt-get update -q -y
 - pip list
 

stages:
#- ver
 - install_dependencies
 - unit_tests
 - build_docker
 - run_docker

.Job_ver:
   stage: ver
   script:
     - python -V

Job_install_dependencies:  
    <<: *only-default
    stage: install_dependencies
     # This runs before the unit_tests task and should do any miscellaneous setup that's needed.
    before_script:
     - echo "install dependencies Stage"
    
    script:
     - pip list
     - pip install -U virtualenv
     - virtualenv venv
     - source venv/bin/activate
     #- pip install -r requirements.txt
     - python setup.py bdist_wheel sdist
     - pip install .
        
    artifacts:
    #FIRST I HAVE TO SETTING TEST TO STORE RESULT TO SUCH .XML FILE AFTER THAT KEEP IN IT IN ARTIFACT
    # reports:
    #  junit: rspec.xml // for unit test
    #  codequality: some.txt //for code review
     paths:
      - venv/
      - venv/bin/
     expire_in: 60 minutes
    
    # The main task to run your tests.
    # This imports the Docker image for Python. Useful so you don't have to do any Python setup manually.
Job_unit_tests:  
    <<: *only-default  
    stage: unit_tests
    script:
     - echo "Running unit testsâ€¦"
     - . venv/bin/activate
     #- flake8 --ignore W292,W391 --exclude=venv* --statistics
     #- pytest -v --cov=calculator
     - pip install tox
     - pip list
     - tox

build_docker_feature:
   # Official docker image.
  #image: docker:git #docker:latestmycontainer
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    #- docker build --pull -t "$CI_REGISTRY_IMAGE" .
    #- docker push "$CI_REGISTRY_IMAGE"
    #- docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    #- docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker build --pull -t $CI_REGISTRY_IMAGE:"OKOK" .
    - docker push $CI_REGISTRY_IMAGE:"OKOK"
   only:
     - developer
   # - tags
   # - master
   # - merge_requests
 
run_docker_feature:
  #image: docker:git
   image: docker:latest
    stage: run_docker
   services:
    - docker:dind
 
   script:
    - docker pull $CI_REGISTRY_IMAGE:"OKOK"
    - docker tag $CI_REGISTRY_IMAGE:"OKOK" myimage
    - docker run --name 'mycontainer' myimage
    - docker stop 'mycontainer'
   after_script:
    
    - docker info
   #- docker rm -f $CI_REGISTRY_IMAGE:"OKOK" myimage || true
   #- docker rmi -f myrepo:myimage image
   only:
     - developer
    
.build:
  # Official docker image.
   image: docker:latest
   stage: build
   services:
    - docker:dind
   before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
   except:
    - master
   


  
